#!/bin/bash -e
#
# S2I run script for the 's2i' image.
# The run script executes the server that runs your application.
#
# For more information see the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#
echo "run...."
echo "PORT = "$PORT
echo "TF_NEED_JEMALLOC = "$TF_NEED_JEMALLOC
echo "TF_NEED_GCP = "$TF_NEED_GCP
echo "TF_NEED_VERBS = "$TF_NEED_VERBS
echo "TF_NEED_HDFS = "$TF_NEED_HDFS
echo "TF_ENABLE_XLA = "$TF_ENABLE_XLA
echo "TF_NEED_OPENCL = "$TF_NEED_OPENCL
echo "TF_NEED_CUDA = "$TF_NEED_CUDA
echo "TF_NEED_MPI = "$TF_NEED_MPI
echo "TF_NEED_GDR = "$TF_NEED_GDR
echo "TF_NEED_S3 = "$TF_NEED_S3
echo "TF_CUDA_VERSION = "$TF_CUDA_VERSION
echo "TF_CUDA_COMPUTE_CAPABILITIES = "$TF_CUDA_COMPUTE_CAPABILITIES
echo "TF_CUDNN_VERSION = "$TF_CUDNN_VERSION
echo "TF_NEED_OPENCL_SYCL= "$TF_NEED_OPENCL_SYCL
echo "TF_CUDA_CLANG= "$TF_CUDA_CLANG
echo "GCC_HOST_COMPILER_PATH= "$GCC_HOST_COMPILER_PATH
echo "CUDA_TOOLKIT_PATH= "$CUDA_TOOLKIT_PATH
echo "CUDNN_INSTALL_PATH= "$CUDNN_INSTALL_PATH

#1.9 onwards
echo "TF_NEED_KAFKA="$TF_NEED_KAFKA
echo "TF_NEED_OPENCL_SYCL="$TF_NEED_OPENCL_SYCL
echo "TF_DOWNLOAD_CLANG="$TF_DOWNLOAD_CLANG
echo "TF_SET_ANDROID_WORKSPACE="$TF_SET_ANDROID_WORKSPACE


echo "CUSTOM_BUILD = "$CUSTOM_BUILD
echo "BUILD_OPTS = "$BUILD_OPTS
echo "JAVA_HOME = "$JAVA_HOME
echo "PATH = "$PATH
echo "TEST_LOOP = "$TEST_LOOP
echo "TF_GIT_BRANCH = "$TF_GIT_BRANCH
echo "PYTHON_LIB_PATH ="$PYTHON_LIB_PATH
echo "LD_LIBRARY_PATH ="$LD_LIBRARY_PATH
echo "PYTHON_BIN_PATH ="$PYTHON_BIN_PATH 



if [ "$NB_PYTHON_VER" = "3.5" ] ; then 
	export LD_LIBRARY_PATH="/opt/rh/rh-python35/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" && 
	echo $LD_LIBRARY_PATH && export PYTHON_LIB_PATH=/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages && 
	echo $PYTHON_LIB_PATH ; fi 
if [ "$NB_PYTHON_VER" = "3.6" ] ; then export LD_LIBRARY_PATH="/opt/rh/rh-python36/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" &&
	echo $LD_LIBRARY_PATH  && export PYTHON_LIB_PATH=/opt/rh/rh-python36/root/usr/lib/python3.6/site-packages &&
	echo $PYTHON_LIB_PATH  ; fi


cd /workspace

# Setup Bazel
command_exists () { type "$1" &> /dev/null ; }
if command_exists bazel ; then 
	echo "bazel command exists."; 
else echo "bazel doesnt exists" && cd /tf/tools/ && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh --user && export PATH=$HOME/bin:$PATH && bazel ; 
fi

# git clone tf
cd /workspace
git clone --branch=$TF_GIT_BRANCH --depth=1 https://github.com/tensorflow/tensorflow.git .
./configure


#BUILD
export PATH=$HOME/bin:$PATH


echo "TF_NEED_CUDA = "$TF_NEED_CUDA
if [ $TF_NEED_CUDA = "1" ]; then 
	echo "######################\n"
	echo "      set cuda       \n"
	echo "######################\n"
	cd /workspace/serving/tensorflow
	sed -i.bak 's/@org_tensorflow\/\/third_party\/gpus\/crosstool/@local_config_cuda\/\/crosstool:toolchain/g' tools/bazel.rc
	cd /workspace/serving/
	sed -i.bak 's/@org_tensorflow\/\/third_party\/gpus\/crosstool/@local_config_cuda\/\/crosstool:toolchain/g' tools/bazel.rc
fi 

#bazel build -c opt --config=cuda --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" --verbose_failures //tensorflow/tools/pip_package:build_pip_package
#bazel build -c opt --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" --verbose_failures //tensorflow/tools/pip_package:build_pip_package
#bazel build -c opt --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" --local_resources 2048,3.0,1.0 --verbose_failures //tensorflow/tools/pip_package:build_pip_package
#bazel build -c opt --config=cuda --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" --local_resources 2048,2.0,1.0 --verbose_failures //tensorflow/tools/pip_package:build_pip_package
#bazel build -c opt --config=cuda --spawn_strategy=standalone --verbose_failures //tensorflow_serving/model_servers:tensorflow_model_server

# if [ -z "$CUSTOM_BUILD" ]; then
# 	bazel build -c opt $BUILD_OPTS --verbose_failures //tensorflow/tools/pip_package:build_pip_package | tee /workspace/ERROR.txt ; test ${PIPESTATUS[0]} -eq 0
# 	if (( $? )); then
# 	    echo "######################\n"
# 		echo "      BUILD  ERROR     \n"
# 		echo "######################\n"
# 		mkdir -p /workspace/bins
# 		mv /workspace/ERROR.txt /workspace/bins/
# 	else
# 	    echo "######################\n"
# 		echo "      BUILD  SUCCESS     \n"
# 		echo "######################\n"
# 		ls -l  bazel-bin/tensorflow/tools/pip_package/build_pip_package && bazel-bin/tensorflow/tools/pip_package/build_pip_package /workspace/bins ;
# 	fi
# else
# 	echo "######################\n"
# 	echo "      CUSTOM  BUILD     \n"
# 	echo "######################\n"
# 	eval "$CUSTOM_BUILD" | tee /workspace/ERROR.txt ; test ${PIPESTATUS[0]} -eq 0
# 	if (( $? )); then
# 	    echo "######################\n"
# 		echo "      BUILD  ERROR     \n"
# 		echo "######################\n"
# 		mkdir -p /workspace/bins
# 		mv /workspace/ERROR.txt /workspace/bins/
# fi


if [[ $TEST_LOOP = "y" ]]
then
    echo "Starting a infinite while loop to debug in console terminal\n"
    while :
	do
		echo "Press [CTRL+C] to stop.."
		sleep 1
	done
fi



echo "######################\n"
echo "      CUSTOM  BUILD     \n"
echo "######################\n"
eval "$CUSTOM_BUILD" | tee /workspace/ERROR.txt ; test ${PIPESTATUS[0]} -eq 0
if (( $? )); then
    echo "######################\n"
	echo "      BUILD  ERROR     \n"
	echo "######################\n"
	mkdir -p /workspace/bins
	if ls -l  /workspace/ERROR.txt; then
		mv /workspace/ERROR.txt /workspace/bins/ ;
	fi
else
	echo "######################\n"
	echo "      BUILD  SUCCESS     \n"
	echo "######################\n"
	if ls -l  bazel-bin/tensorflow/tools/pip_package/build_pip_package; then
		bazel-bin/tensorflow/tools/pip_package/build_pip_package /workspace/bins ;
	fi
	if ls -l  /workspace/ERROR.txt; then
		mv /workspace/ERROR.txt /workspace/bins/ ;
	fi
fi


cd /workspace/
if [[ $NB_PYTHON_VER = "2.7" ]] ; then 
	python -m SimpleHTTPServer $PORT ; 
else python -m http.server $PORT ; 
fi
 





